/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * viewTransactions.java
 *
 * Created on 02-Oct-2010, 08:23:57
 */
package LibraryApplication;

/**
 *
 * @author FOUR.TWO
 */
import java.sql.*;
import javax.swing.table.DefaultTableModel;

public class viewTransactions extends javax.swing.JInternalFrame {

    /** Creates new form viewTransactions */
    public viewTransactions() {
        initComponents();
        searchList();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    Object[][] array;

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        transactionsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        orderComboBox = new javax.swing.JComboBox();
        closeButton = new javax.swing.JButton();
        viewButton = new javax.swing.JButton();

        setClosable(true);
        setTitle("View Transactions");
        setPreferredSize(new java.awt.Dimension(589, 385));

        transactionsTable.setModel(new javax.swing.table.DefaultTableModel(
            array,
            new String [] {
                "Member", "Item Borrowed", "Date Borrowed", "Date Due", "Date Returned", "Fine"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, 
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(transactionsTable);

        jLabel1.setText("Order Transactions  By");

        orderComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Transaction ID", "Member ID", "Date Returned", "Date Due", "Fine" }));

        closeButton.setText("Close");
        closeButton.setPreferredSize(new java.awt.Dimension(73, 23));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        viewButton.setText("Change View");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addComponent(orderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(viewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(256, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 703, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(orderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        // TODO add your handling code here:
        int option = orderComboBox.getSelectedIndex();

        int count = 0;
        try {
            ResultSet result = null, countResult;
            Connection con = null;
            //Load JBBC driver "com.mysql.jdbc.Driver"
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "");
            PreparedStatement countStatement = con.prepareStatement("SELECT COUNT(*) FROM library.transactions");
            countResult = countStatement.executeQuery();
            while (countResult.next()) {
                count = Integer.parseInt(countResult.getString(1));
            }
            PreparedStatement statement;
            switch (option) {
                case 0:
                    statement = con.prepareStatement("SELECT * FROM library.transactions ORDER BY id DESC");
                    result = statement.executeQuery();
                    break;
                case 1:
                    statement = con.prepareStatement("SELECT * FROM library.transactions ORDER BY memberID");
                    result = statement.executeQuery();
                    break;
                case 2:
                    statement = con.prepareStatement("SELECT * FROM library.transactions ORDER BY rDate");
                    result = statement.executeQuery();
                    break;
                case 3:
                    statement = con.prepareStatement("SELECT * FROM library.transactions ORDER BY dDate");
                    result = statement.executeQuery();
                    break;
                case 4:
                    statement = con.prepareStatement("SELECT * FROM library.transactions ORDER BY Fine DESC");
                    result = statement.executeQuery();
                    break;
            }

            array = new Object[count][6];
            int i = 0;
            while (result.next()) {
                array[i][0] = result.getString(2);
                array[i][1] = result.getString(3);
                array[i][2] = result.getString(4);
                array[i][3] = result.getString(5);

                if (result.getString(6).equalsIgnoreCase("2000-01-01")) {
                    array[i][4] = "Pending";
                } else {
                    array[i][4] = result.getString(6);
                }
                array[i][5] = result.getString(7);

                i += 1;
            }



            result.close();
            con.close();

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        DefaultTableModel dtm = new DefaultTableModel(array, new String[]{"Member", "Item Borrowed", "Date Borrowed", "Date Due", "Date Returned", "Fine"});
        transactionsTable.setModel(dtm);
        transactionsTable.updateUI();

    }//GEN-LAST:event_viewButtonActionPerformed

    public void searchList() {
        int count = 0;
        try {
            ResultSet result = null, countResult;
            Connection con = null;
            //Load JBBC driver "com.mysql.jdbc.Driver"
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "");
            PreparedStatement countStatement = con.prepareStatement("SELECT COUNT(*) FROM library.transactions");
            countResult = countStatement.executeQuery();
            while (countResult.next()) {
                count = Integer.parseInt(countResult.getString(1));
            }
            PreparedStatement statement = con.prepareStatement("SELECT * FROM library.transactions ORDER BY id DESC");
            result = statement.executeQuery();
            array = new Object[count][7];
            int i = 0;
            while (result.next()) {
                array[i][0] = result.getString(2);
                array[i][1] = result.getString(3);
                array[i][2] = result.getString(4);
                array[i][3] = result.getString(5);

                if (result.getString(6).equalsIgnoreCase("2000-01-01")) {
                    array[i][4] = "Pending";
                } else {
                    array[i][4] = result.getString(6);
                }
                array[i][5] = result.getString(7);

                i += 1;
            }



            result.close();
            con.close();

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        DefaultTableModel dtm = new DefaultTableModel(array, new String[]{"Member", "Item Borrowed", "Date Borrowed", "Date Due", "Date Returned", "Fine"});
        transactionsTable.setModel(dtm);
        transactionsTable.updateUI();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox orderComboBox;
    private javax.swing.JTable transactionsTable;
    private javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables
}
